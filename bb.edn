{:paths ["src" "resources"]
 :deps {io.github.babashka/instaparse-bb {:git/sha "059045f6a8450bda74eb30136ddd2c5475f788d1"}
        io.github.judepayne/dictim.graph {:git/tag "0.1.5" :git/sha "67f4507"}
        metosin/malli                    {:mvn/version "0.19.1"}}
 :tasks
 {test:bb {:extra-paths ["test"]
           :extra-deps {io.github.cognitect-labs/test-runner
                        {:git/tag "v0.5.1" :git/sha "dfb30dd"}}
           :task (exec 'cognitect.test-runner.api/test)
           :exec-args {:dirs ["test"]}
           :org.babashka/cli {:coerce {:nses [:symbol]
                                       :vars [:symbol]}}}
  bbin-cmd-test (shell "bb test/cmd_test.clj --cmd :bbin")
  bin-cmd-test (shell "bb test/cmd_test.clj --cmd :bin")
  bb-cmd-test (shell "bb test/cmd_test.clj --cmd :bb")
  win-cmd-test (shell "bb test/cmd_test.clj --cmd :win")
  build (shell "bb uberjar dict.jar -m cmd.dictim")
  release-artifact
  {:extra-paths [".build"]
   :extra-deps {io.github.borkdude/gh-release-artifact {:git/tag "v0.2.1" :git/sha "4a9a74f"}}
   :task (exec 'release-artifact/release)}
  quickdoc {:doc "Invoke quickdoc"
            :extra-deps {io.github.borkdude/quickdoc {:git/sha "7c8bef54eda28367193ec433af01bb940114f012"}}
            :task (exec 'quickdoc.api/quickdoc)
            :exec-args {:git/branch "main"
                        :github/repo "https://github.com/judepayne/dictim"
                        :source-paths ["src/dictim/d2/compile.cljc"
                                       "src/dictim/d2/parse.cljc"
                                       "src/dictim/dot/compile.cljc"
                                       "src/dictim/flat.cljc"
                                       "src/dictim/json.cljc"
                                       "src/dictim/format.cljc"
                                       "src/dictim/tests.cljc"
                                       "src/dictim/template.cljc"
                                       "src/dictim/graphspec.clj"
                                       "src/dictim/walk.cljc"
                                       "src/dictim/spec.cljc"]}}
  uber (clojure "-T:build uber")}}
