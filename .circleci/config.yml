version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  test:
    docker:
      - image: cimg/clojure:1.11.1-openjdk-17.0

    working_directory: ~/project
    steps:
      # Checkout the code using HTTPS + token
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - restore_cache:
         keys:
           - v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}
           # fallback to using the latest cache if no exact match is found
           - v1-dependencies-
      - run:
          name: Install Clojure
          command: |
            wget -nc https://download.clojure.org/install/linux-install-1.11.1.1149.sh
            chmod +x linux-install-1.11.1.1149.sh
            sudo ./linux-install-1.11.1.1149.sh
      - run:
          name: run clj tests
          command: |
            clojure -X:test
      - run:
          name: install babashka
          command: |
            sudo bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)
      - run:
          name: run bb tests
          command: |
            bb test:bb
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}

  mac:
    macos:
      xcode: "14.3.1"
    environment:
      GRAALVM_HOME: /Users/distiller/graalvm-ce-java17-22.3.0/Contents/Home
      APP_PLATFORM: macos # used in release script
      APP_ARCH: aarch64 # used in release script
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Get rid of erroneous git config
          command: |
              rm -rf ~/.gitconfig
      - restore_cache:
          keys:
            - mac-aarch64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            sudo .circleci/script/install-clojure /usr/local
      - run:
          name: Download GraalVM
          command: |
            cd ~
            ls -la
            if ! [ -d graalvm-ce-java17-22.3.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-darwin-aarch64-22.3.0.tar.gz
              tar xzf graalvm-ce-java17-darwin-aarch64-22.3.0.tar.gz
            fi
      - run:
          name: Build binary
          command: |
            script/compile
          no_output_timeout: 30m
      - run:
          name: Run tests
          command: |
            curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
            chmod +x install
            sudo ./install
            bb bin-cmd-test
      - run:
          name: Release
          command: |
            .circleci/script/release-binary
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-ce-java17-22.3.0
          key: mac-aarch64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}

  linux:
    docker:
      - image: cimg/clojure:1.11.1-openjdk-17.0
    working_directory: ~/repo
    environment:
      GRAALVM_HOME: /home/circleci/graalvm-ce-java17-22.3.0
      APP_PLATFORM: linux # used in release script
      APP_ARCH: amd64 # used in release script
      DICTIM_STATIC: "true"
      DICTIM_MUSL: "true"
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Get rid of erroneous git config
          command: |
              rm -rf ~/.gitconfig
      - restore_cache:
          keys:
            - linux-amd64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            wget https://download.clojure.org/install/linux-install-1.11.1.1149.sh
            chmod +x linux-install-1.11.1.1149.sh
            sudo ./linux-install-1.11.1.1149.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential zlib1g-dev
            sudo -E script/setup-musl
      - run:
          name: Download GraalVM
          command: |
            cd ~
            ls -la
            if ! [ -d graalvm-ce-java17-22.3.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-linux-amd64-22.3.0.tar.gz
              tar xzf graalvm-ce-java17-linux-amd64-22.3.0.tar.gz
            fi
      - run:
          name: Build binary
          command: |
            script/compile
          no_output_timeout: 30m
      - run:
          name: Run tests
          command: |
            curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
            chmod +x install
            sudo ./install
            bb bin-cmd-test
      - run:
          name: Release
          command: |
            .circleci/script/release-binary
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-ce-java17-22.3.0
          key: linux-amd64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}

  linux-aarch64:
    machine:
      enabled: true
      image: ubuntu-2004:current
    resource_class: arm.large
    working_directory: ~/repo
    environment:
      GRAALVM_HOME: /home/circleci/graalvm-ce-java17-22.3.0
      APP_PLATFORM: linux # used in release script
      APP_ARCH: aarch64 # used in release script
      DICTIM_STATIC: "true"
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Get rid of erroneous git config
          command: |
              rm -rf ~/.gitconfig
      - restore_cache:
          keys:
            - linux-aarch64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install Clojure
          command: |
            wget https://download.clojure.org/install/linux-install-1.11.1.1149.sh
            chmod +x linux-install-1.11.1.1149.sh
            sudo ./linux-install-1.11.1.1149.sh
      - run:
          name: Install native dev tools
          command: |
            sudo apt-get update
            sudo apt-get -y install build-essential zlib1g-dev
      - run:
          name: Download GraalVM
          command: |
            script/check_glibc.sh
            cd ~
            ls -la
            if ! [ -d graalvm-ce-java17-22.3.0 ]; then
              curl -O -sL https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-22.3.0/graalvm-ce-java17-linux-aarch64-22.3.0.tar.gz
              tar xzf graalvm-ce-java17-linux-aarch64-22.3.0.tar.gz
            fi
      - run:
          name: Build binary
          command: |
            script/compile
          no_output_timeout: 30m
      - run:
          name: Run tests
          command: |
            curl -sLO https://raw.githubusercontent.com/babashka/babashka/master/install
            chmod +x install
            sudo ./install
            bb bin-cmd-test
      - run:
          name: Release
          command: |
            .circleci/script/release-binary
      - save_cache:
          paths:
            - ~/.m2
            - ~/graalvm-ce-java17-22.3.0
          key: linux-aarch64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      
  release-bb:
    docker:
      - image: cimg/clojure:1.11.1-openjdk-17.0

    working_directory: ~/project
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - restore_cache:
         keys:
           - v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}
           # fallback to using the latest cache if no exact match is found
           - v1-dependencies-
      - run:
          name: install babashka
          command: |
            sudo bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)
      - run:
          name: build bb uberjar
          command: |
            bb build
      - run:
          name: release artifact
          command: |
            .circleci/script/release-bb
      - run:
          name: install bbin
          command: |
            mkdir -p ~/.local/bin && curl -o- -L https://raw.githubusercontent.com/babashka/bbin/v0.2.1/bbin > ~/.local/bin/bbin && chmod +x ~/.local/bin/bbin
            echo 'export PATH="$PATH:$HOME/.local/bin"' >> ~/.$(basename $SHELL)rc && exec $SHELL
      - run:
          name: install dictim via bbin
          command: |
            bbin install https://github.com/judepayne/dictim/releases/latest/download/dictim.jar
      - run:
          name: run dictim command tests
          command: |
            bb bbin-cmd-test

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "bb.edn" }}

  windows:
    executor:
      name: win/default
      shell: powershell.exe
    working_directory: ~/project
    environment:
      GRAALVM_HOME: C:\Users\circleci\graalvm-community-openjdk-21.0.2+13.1
      APP_PLATFORM: windows
      APP_ARCH: amd64
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Get rid of erroneous git config
          command: |
            if (Test-Path ~/.gitconfig) { Remove-Item ~/.gitconfig }
      - restore_cache:
          keys:
            - windows-amd64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}
      - run:
          name: Download and Install GraalVM
          command: |
            if (Test-Path("C:\Users\circleci\graalvm-community-openjdk-21.0.2+13.1")) {
              Write-Host "GraalVM already exists"
            } else {
              Write-Host "Downloading GraalVM..."
              $url = "https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-21.0.2/graalvm-community-jdk-21.0.2_windows-x64_bin.zip"
              Invoke-WebRequest -Uri $url -OutFile "graalvm.zip"
              Expand-Archive graalvm.zip C:\Users\circleci\
            }
          no_output_timeout: 10m
      - run:
          name: Install Clojure CLI
          command: |
            if (Get-Command clojure -ErrorAction SilentlyContinue) {
              Write-Host "Clojure already installed"
            } else {
              $url = "https://github.com/casselc/clj-msi/releases/download/v1.11.3.1463/clojure-1.11.3.1463.msi"
              Invoke-WebRequest -Uri $url -OutFile "clojure.msi"
              Start-Process msiexec.exe -Wait -ArgumentList '/i','clojure.msi','/qn'
            }
      - run:
          name: Install Babashka
          command: |
            if (Test-Path("bb.exe")) {
              Write-Host "Babashka already exists"
            } else {
              $url = "https://github.com/babashka/babashka/releases/download/v1.3.190/babashka-1.3.190-windows-amd64.zip"
              Invoke-WebRequest -Uri $url -OutFile "bb.zip"
              Expand-Archive bb.zip .
            }
      - run:
          name: Setup Visual Studio Environment
          command: |
            cmd /c "call `"C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat`" && set" | ForEach-Object {
              if ($_ -match "^(.+?)=(.*)$") {
                [Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
            }
      - run:
          name: Build binary
          command: |
            .circleci/script/compile-windows.bat
          no_output_timeout: 30m
      - run:
          name: Run tests
          command: |
            ./bb.exe bin-cmd-test --cmd win
      - run:
          name: Release
          command: |
            .circleci/script/release-binary-windows.bat
      - save_cache:
          paths:
            - C:\Users\circleci\graalvm-community-openjdk-21.0.2+13.1
            - ~/.m2
          key: windows-amd64-{{ checksum "deps.edn" }}-{{ checksum ".circleci/config.yml" }}

  update-homebrew:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Install jq
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
      - run:
          name: Update Homebrew Formula
          command: |
            .circleci/script/update-homebrew

  submit-winget:
    docker:
      - image: cimg/base:stable
    working_directory: ~/project
    steps:
      - run:
          name: Checkout code
          command: |
            git clone https://${GITHUB_TOKEN}@github.com/judepayne/dictim.git .
            git checkout $CIRCLE_SHA1
      - run:
          name: Submit to WinGet
          command: |
            .circleci/script/submit-winget

workflows:
  test-and-release-on-main:
    jobs:
      - test
      - mac:
          requires:
            - test
          filters:
            branches:
              only: main
      - linux:
          requires:
            - test
          filters:
            branches:
              only: main
      - linux-aarch64:
          requires:
            - test
          filters:
            branches:
              only: main
      - windows:
          requires:
            - test
          filters:
            branches:
              only: main
      - release-bb:
          requires:
            - test
          filters:
            branches:
              only: main
      - update-homebrew:
          requires:
            - mac
            - linux
            - linux-aarch64
            - windows
            - release-bb
          filters:
            branches:
              only: main
      - submit-winget:
          requires:
            - mac
            - linux
            - linux-aarch64
            - windows
            - release-bb
          filters:
            branches:
              only: main
