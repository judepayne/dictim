#!/usr/bin/env bash

set -eo pipefail

VERSION=$(cat resources/VERSION)
REPO_URL="https://github.com/judepayne/dictim"
WINGET_FORK="https://github.com/judepayne/winget-pkgs.git"

echo "Submitting dictim v$VERSION to WinGet..."

# Clone your fork of winget-pkgs repository
git clone https://${GITHUB_TOKEN}@github.com/judepayne/winget-pkgs.git /tmp/winget-pkgs
cd /tmp/winget-pkgs

# Configure git
git config user.name "CircleCI"
git config user.email "jude@judep.org"

# Sync fork with upstream master
git remote add upstream https://github.com/microsoft/winget-pkgs.git
git fetch upstream
git checkout master
git merge upstream/master --no-edit
git push origin master

# Create branch for this submission
BRANCH_NAME="dictim-${VERSION}"
git checkout -b $BRANCH_NAME

# Calculate SHA256 for Windows binary
WINDOWS_AMD64_URL="$REPO_URL/releases/download/v$VERSION/dictim-$VERSION-windows-amd64.exe"
echo "Calculating SHA256 for Windows binary..."
WINDOWS_SHA256=$(curl -sL "$WINDOWS_AMD64_URL" | sha256sum | cut -d' ' -f1)

# Create manifest directory
MANIFEST_DIR="manifests/j/judepayne/dictim/$VERSION"
mkdir -p "$MANIFEST_DIR"

# Create version manifest
cat > "$MANIFEST_DIR/judepayne.dictim.yaml" << EOF
PackageIdentifier: judepayne.dictim
PackageVersion: $VERSION
DefaultLocale: en-US
ManifestType: version
ManifestVersion: 1.6.0
EOF

# Create installer manifest
cat > "$MANIFEST_DIR/judepayne.dictim.installer.yaml" << EOF
PackageIdentifier: judepayne.dictim
PackageVersion: $VERSION
InstallerType: portable
Installers:
- Architecture: x64
  InstallerUrl: $WINDOWS_AMD64_URL
  InstallerSha256: $WINDOWS_SHA256
ManifestType: installer
ManifestVersion: 1.6.0
EOF

# Create locale manifest
cat > "$MANIFEST_DIR/judepayne.dictim.locale.en-US.yaml" << EOF
PackageIdentifier: judepayne.dictim
PackageVersion: $VERSION
PackageLocale: en-US
Publisher: Jude Payne
PackageName: dictim
PackageUrl: https://github.com/judepayne/dictim
License: MIT
ShortDescription: Diagram-as-data library for converting between dictim syntax and D2/Graphviz formats
Description: A Clojure library and command-line tool for creating diagrams as data structures, with seamless conversion to D2 diagram syntax.
Tags:
- diagram
- d2
- data
- clojure
- cli
ManifestType: defaultLocale
ManifestVersion: 1.6.0
EOF

# Add files and create commit
git add "$MANIFEST_DIR/"
git commit -m "Add dictim version $VERSION"

# Push branch and create PR
git push origin $BRANCH_NAME

# Create PR using GitHub API
PR_BODY="This PR adds dictim version $VERSION to WinGet.

**Package:** judepayne.dictim
**Version:** $VERSION
**Publisher:** Jude Payne

dictim is a diagram-as-data library and CLI tool for converting between structured data and D2 diagram syntax."

curl -X POST \
  -H "Authorization: token $GITHUB_TOKEN" \
  -H "Accept: application/vnd.github.v3+json" \
  https://api.github.com/repos/microsoft/winget-pkgs/pulls \
  -d "$(cat <<EOF
{
  "title": "Add dictim version $VERSION",
  "head": "judepayne:$BRANCH_NAME",
  "base": "master",
  "body": "$PR_BODY"
}
EOF
)"

echo "WinGet submission completed! PR created for dictim v$VERSION"